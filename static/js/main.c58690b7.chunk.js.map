{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","task","setTasks","taskInput","useRef","addTask","name","newTasks","done","className","onSubmit","e","preventDefault","console","log","current","focus","ref","autoFocus","type","onChange","target","value","map","t","i","key","style","textDecoration","onClick","toggleDoneClass","splice","deleteTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mOAqEeA,MA9Df,WAAgB,IAAD,EACgBC,mBAAiB,IADjC,mBACPC,EADO,KACEC,EADF,OAEWF,mBAAkB,IAF7B,mBAEPG,EAFO,KAEDC,EAFC,KAGRC,EAAYC,iBAAyB,MAUrCC,EAAU,SAACC,GAChB,IAAMC,EAAiB,sBAAON,GAAP,CAAa,CAACK,OAAME,MAAM,KACjDN,EAASK,IAcV,OACC,yBAAKE,UAAU,iBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACd,0BAAMC,SA9BW,SAACC,GAAoB,IAAD,EACxCA,EAAEC,iBACFP,EAAQN,GACRc,QAAQC,IAAIb,GACZD,EAAW,IACX,UAAAG,EAAUY,eAAV,SAAmBC,UA0Bb,2BAAOP,UAAU,eAAeQ,IAAKd,EAAWe,WAAS,EAACC,KAAK,OAAOC,SAAU,SAAAT,GAAC,OAAIX,EAAWW,EAAEU,OAAOC,QAAQA,MAAOvB,IACxH,2BAAOoB,KAAK,SAASV,UAAU,iCAAiCa,MAAM,cAKxErB,EAAKsB,KAAI,SAACC,EAAUC,GAAX,OACR,yBAAKC,IAAKD,EAAGhB,UAAU,uBACtB,wBAAIkB,MAAO,CAACC,eAAgBJ,EAAEhB,KAAO,eAAiB,KAAOgB,EAAElB,MAC/D,6BACC,4BAAQG,UAAU,oBAAoBoB,QAAS,kBA5B/B,SAACJ,GACxB,IAAMlB,EAAiB,YAAON,GAC9BM,EAASkB,GAAGjB,MAAQD,EAASkB,GAAGjB,KAChCN,EAASK,GAyBmDuB,CAAgBL,KACnED,EAAEhB,KAAO,SAAM,UAEjB,4BAAQC,UAAU,iBAAiBoB,QAAS,kBAzBjC,SAACJ,GACnB,IAAMlB,EAAiB,YAAON,GAC9BM,EAASwB,OAAON,EAAG,GACnBvB,EAASK,GAsBgDyB,CAAWP,KAA7D,yBC5CWQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.c58690b7.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n\tname: string,\n\tdone: boolean\n}\nfunction App() {\n\tconst [newTask, setNewTask] = useState<string>(''); \n\tconst [task, setTasks] = useState<ITask[]>([]);\n\tconst taskInput = useRef<HTMLInputElement>(null);\n\n\tconst handleSubmit = (e: FormElement) => {\n\t\te.preventDefault();\n\t\taddTask(newTask);\n\t\tconsole.log(task);\n\t\tsetNewTask('');\n\t\ttaskInput.current?.focus();\n\t}\n\n\tconst addTask = (name: string): void => {\n\t\tconst newTasks: ITask[] = [...task, {name, done: false}];\n\t\tsetTasks(newTasks);\n\t}\n\t\n\tconst toggleDoneClass = (i: number): void => {\n\t\tconst newTasks: ITask[] = [...task];\n\t\tnewTasks[i].done = !newTasks[i].done;\n\t\tsetTasks(newTasks);\n\t}\n\n\tconst deleteTask = (i: number): void => {\n\t\tconst newTasks: ITask[] = [...task];\n\t\tnewTasks.splice(i ,1);\n\t\tsetTasks(newTasks);\n\t}\n\treturn (\n\t\t<div className=\"container p-4\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-md-6 offset-md-3\">\n\t\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t<input className=\"form-control\" ref={taskInput} autoFocus type=\"text\" onChange={e => setNewTask(e.target.value)} value={newTask}/>\n\t\t\t\t\t\t\t\t<input type=\"submit\" className=\"btn btn-success btn-block mt-2\" value=\"Enviar\"/>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\ttask.map((t: ITask, i: number) => (\n\t\t\t\t\t\t\t<div key={i} className=\"card card-body mt-2\">\n\t\t\t\t\t\t\t\t<h1 style={{textDecoration: t.done ? 'line-through' : ''}} >{t.name}</h1>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-secondary\" onClick={() => toggleDoneClass(i)}>\n\t\t\t\t\t\t\t\t\t\t{t.done ? 'âœ“' : 'âœ—'}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button className=\"btn btn-danger\" onClick={() => deleteTask(i)}>\n\t\t\t\t\t\t\t\t\t\tðŸ—‘\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootswatch/dist/lumen/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}